##############################
# Documentation forthcoming! #
##############################

#random_seed = 0xdeadbeef
job = "Roper"
#job = "LinearGp"
#selection = "Roulette"
#selection = "Tournament" # currently inefficient
selection = "Lexicase"
#selection = "Metropolis"
mut_rate = 0.05
crossover_period = 2
crossover_rate = 1.0 # versus clone
max_init_len = 100
min_init_len = 10
# bigger populations seem like the way to go. 
# TODO: experiment with shrinking populations:
# large initial populations, with permadeath
# and a minimal limit set.
pop_size = 0x1000
num_offspring = 2
num_parents = 2
max_length = 100
num_epochs = 100 # = infinite
season_length = 100 # tweak
# add this:

[fitness]
priority = "register_error"
function = "register_pattern"
target = 0
eval_by_case = false
dynamic = true # TODO: use this to decide whether to re-evaluate fitness
# as distinct, sometimes, from execution.
#
###
# The variables available to use here are:
# x := the unweighted fitness score
# E := the current epoch.
# You can use these to deprioritize weights as
# time goes on.
##
[fitness.weights]
# uses fasteval to evaluate weighting expressions
gadgets_executed = "(5 - min(5, x)) / ((1+E)/ 100)" #"-1 * min(3, x)"
register_error = "x"
#mem_ratio_written = "0"
crash_count = "x"
code_frequency = "0"
#genetic_freq = "0" #"min(2, x * 50)"
#mem_ratio_written ="x" 
#crash_count = "x"
zeroes = "x"
#code_frequency = "10*x" #x/2"

[tournament]
tournament_size = 7
# todo: plot diversity and fitness wrt radius changes.
# maybe experiment with dynamic radius adjustments
# as a response to loss of diversity
geographic_radius = 20
migration_rate = 0.0001

[roulette]
# Should be a float greater than 0.0 and less than 1.0. The lower the value, the more elitist the selection.
weight_decay = 0.8

[hello]
target = "Mares eat oats and does eat oats and little lambs eat ivy."


[linear_gp]
max_steps = 0x1000

[observer]
dump_population = false
dump_soup = true 
data_directory = "~/logs"
window_size  = 3000
report_every = 3000
dump_every = 1000000

[data]
#path = "./data/iris.tsv"
# FIXME: something fishy is happening with square! too many registers, and
# it appears that the machine is not
# running!
#path = "./data/square.tsv"
path = "./data/agaricus-lepiota.tsv"

[roper]
#fitness_function = "register_pattern"
#fitness_function = "code_coverage"
arch = "X86"
mode = "MODE_32"
#gadget_file = "./gadgets/sh_soup.json"
soup_size = 0x10000
binary_path = "./binaries/X86/MODE_32/tshark"
#binary_path = "/tmp/ldconfig"
num_workers = 41
num_emulators = 31
max_emu_steps = 0x100_000
millisecond_timeout = 500
emulator_stack_size = 0x1000
record_basic_blocks = true
record_memory_writes = true
#output_registers = ["RBX", "RCX", "R10", "RDI", "RSI", "RSP", "RBP", "RIP", "RAX" ]
output_registers = ["EAX", "EDI", "ESI" , "EIP", "EBP", "ESP"]
  [roper.register_pattern] 
#  RAX = "0x3b"                   # execve syscall number
  EAX = "0x0b"
  EBX = "&'/bin/sh"
  ECX = "&0"
  EDX = "0"
#  RSI = "&&0"                  # an empty argv array
